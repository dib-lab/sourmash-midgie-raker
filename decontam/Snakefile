DBLIST=['/group/ctbrowngrp5/sourmash-db.new/gtdb-rs226/gtdb-rs226-k51.dna.rocksdb',
        '/group/ctbrowngrp5/sourmash-db.new/ncbi-euks-2025.01/ncbi-euks-all-2025.01-k51.dna.rocksdb/',
        ]
TAXLIST=['/group/ctbrowngrp5/sourmash-db.new/gtdb-rs226/gtdb-rs226.lineages.sqldb',
         '/group/ctbrowngrp5/sourmash-db.new/ncbi-euks-2025.01/ncbi-eukaryotes.2025.01.lineages.sqldb',
         ]

SKETCHES='../rename/bin-sketches.renamed.sig.zip'

import glob, csv
import sourmash
from sourmash.sourmash_args import SaveSignaturesToLocation
import collections

db = sourmash.load_file_as_index(SKETCHES)
mf = db.manifest

IDENT_MD5 = {}
for row in mf.rows:
    if row['ksize'] == 51:
        ident = row['name'].split(' ')[0]
        IDENT_MD5[ident] = row['md5']

print(f"loaded {len(IDENT_MD5)} from '{SKETCHES}'")

rule all:
    input:
        expand("gather.d/{ident}.gather.csv", ident=IDENT_MD5),
        'combined-gather.csv',
        'combined-gather.with-lineages.csv',


checkpoint explode_zip:
    input:
        sketches=SKETCHES,
    output:
        expand("gather.d/{ident}.sig.zip", ident=IDENT_MD5)
    run:
        # collect sketches by ident
        print(f"loading from '{input[0]}'")
        sketch_d = collections.defaultdict(list)
        for ss in db.signatures():
            ident = ss.name.split(' ')[0]
            sketch_d[ident].append(ss)

        # write out by ident
        for ident, sigs in sketch_d.items():
            fname = f'gather.d/{ident}.sig.zip'
            print(f'writing {fname}')
            with SaveSignaturesToLocation(fname) as save_sig:
                save_sig.add_many(sigs)

rule gather:
    input:
        sketch='gather.d/{ident}.sig.zip',
        dblist=DBLIST,
    output:
        csv=touch("gather.d/{ident}.gather.csv"),
        txt="gather.d/{ident}.gather.out",
    shell: """
        sourmash gather -k 51 --scaled 10_000 --threshold-bp=0 \
            {input.sketch} {input.dblist} -o {output.csv} > {output.txt} || true
    """

rule combine_csv:
    input:
        expand("gather.d/{ident}.gather.csv", ident=IDENT_MD5)
    output:
        'combined-gather.csv'
    run:
        filenames = input
        outfp = None
        w = None
        fieldnames = None
        for filename in filenames:
            with open(filename, 'r', newline='') as fp:
                r = csv.DictReader(fp)
                fieldnames = r.fieldnames

                if outfp is None:
                    outfp = open(output[0], 'w', newline='')
                    w = csv.DictWriter(outfp, fieldnames=fieldnames)
                    w.writeheader()

                for row in r:
                    w.writerow(row)

rule tax_annotate:
    input:
        'combined-gather.csv',
    output:
        protected('combined-gather.with-lineages.csv'),
    shell: """
        sourmash tax annotate -g {input} -t {TAXLIST}
    """
